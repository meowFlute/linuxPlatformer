#include "GLSLProgram.h"
#include "Errors.h"

#include <fstream>
#include <vector>

GLSLProgram::GLSLProgram() : _numAttributes(0), _programID(0), _vertexShaderID(0), _fragmentShaderID(0)
{

}

GLSLProgram::~GLSLProgram()
{

}
	
void GLSLProgram::compileShaders(const std::string& vertexShaderFilePath, const std::string fragmentShaderFilepath)
{
	_vertexShaderID = glCreateShader(GL_VERTEX_SHADER);
	if (_vertexShaderID == 0)
	{
		fatalError("Vertex shader failed to be created");
	}
	
	_fragmentShaderID = glCreateShader(GL_FRAGMENT_SHADER);
	if (_fragmentShaderID == 0)
	{
		fatalError("Vertex shader failed to be created");
	}
	
	compileShader(vertexShaderFilePath, _vertexShaderID);
	compileShader(fragmentShaderFilepath, _fragmentShaderID);
}
	
void GLSLProgram::linkShaders()
{
	//Vertex and fragment shaders are successfully compiled.
	//Now time to link them together into a program.
	//Get a program object.
	_programID = glCreateProgram();
	 
	//Attach our shaders to our program
	glAttachShader(_programID, _vertexShaderID);
	glAttachShader(_programID, _fragmentShaderID);
	 
	//Link our program
	glLinkProgram(_programID);
	 
	//Note the different functions here: glGetProgram* instead of glGetShader*.
	GLint isLinked = 0;
	glGetProgramiv(_programID, GL_LINK_STATUS, (int *)&isLinked);
	if(isLinked == GL_FALSE)
	{
		GLint maxLength = 0;
		glGetProgramiv(_programID, GL_INFO_LOG_LENGTH, &maxLength);
	 
		//The maxLength includes the NULL character
		std::vector<GLchar> infoLog(maxLength);
		glGetProgramInfoLog(_programID, maxLength, &maxLength, &infoLog[0]);
	 
		//We don't need the program anymore.
		glDeleteProgram(_programID);
		//Don't leak shaders either.
		glDeleteShader(_vertexShaderID);
		glDeleteShader(_fragmentShaderID);
	 
		//Use the infoLog as you see fit.
	 	std::printf("%s\n", &(infoLog[0]));
		fatalError("shaders failed to link");
	}
	 
	//Always detach shaders after a successful link.
	glDetachShader(_programID, _vertexShaderID);
	glDetachShader(_programID, _fragmentShaderID);
	
	//Don't need shaders anymore
	glDeleteShader(_vertexShaderID);
	glDeleteShader(_fragmentShaderID);
}

//add attributes to the shaders
void GLSLProgram::addAttribute(const std::string& attributeName)
{
	glBindAttribLocation(_programID, _numAttributes++, attributeName.c_str());
}

//modular shader compilation
void GLSLProgram::compileShader(const std::string filepath, GLuint id)
{
	std::ifstream inputFile(filepath.c_str());
	if (inputFile.fail())
	{
		fatalError("Failed to open" + filepath);
	}
	
	std::string fileContents = "";
	std::string line;
	
	while(std::getline(inputFile, line))
	{
		fileContents += line + "\n";
	}
	
	inputFile.close();
	
	const char* contentsPtr[] = {fileContents.c_str()};
	glShaderSource(id, 1, contentsPtr, NULL);
	glCompileShader(id);
	
	GLint success = 0;
	glGetShaderiv(id, GL_COMPILE_STATUS, &success);
	if(!success);
	{
		GLint maxLength = 0;
		glGetShaderiv(id, GL_INFO_LOG_LENGTH, &maxLength);
	 
		// The maxLength includes the NULL character
		std::vector<GLchar> errorLog(maxLength);
		glGetShaderInfoLog(id, maxLength, &maxLength, &errorLog[0]);
	 
		// Provide the infolog in whatever manor you deem best.
		// Exit with failure.
		glDeleteShader(id); // Don't leak the shader.
		
		std::printf("%s\n", &(errorLog[0]));
		fatalError("shader " + filepath + "failed to compile");
	}
}

void GLSLProgram::use()
{
	glUseProgram(_programID);
	for(int i = 0; i < _numAttributes; i++)
	{
		glEnableVertexAttributeArray(i);
	}
}

void GLSLProgram::unUse()
{
	glUseProgram(0);
	for(int i = 0; i < _numAttributes; i++)
	{
		glDisableVertexAttributeArray(i);
	}
}
